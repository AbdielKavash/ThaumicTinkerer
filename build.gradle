buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

version = "${config.mc_version}-${config.version}"
if (System.getenv("BUILD_NUMBER") != null) {
    version += "-${System.getenv("BUILD_NUMBER")}"
} else if(config.build_number != null){
    version += "-${config.build_number}"
}
if (project.hasProperty("releaseType") && project.releaseType == "ALPHA") {
    version += "_alpha"
}
group = "thaumic.tinkerer" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"

    replace "\${version}", config.version
}

repositories {
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven { // the repo from which to get NEI and stuff
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven {
        name = "gt"
        url = "https://gregtech.overminddl1.com/"
    }
}

dependencies {
    compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
    compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
    compile "mcp.mobius.waila:Waila:1.5.10_1.7.10"
    compile "net.industrial-craft:industrialcraft-2:2.2.827-experimental:dev"
    compile "codechicken:EnderStorage:1.7.10-1.4.7.37:dev"
    compile "com.azanor.baubles:Baubles:1.7.10-1.0.1.10:deobf"
    compile "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"
    compile "appeng:appliedenergistics2:rv3-beta-6:dev"
    compile "li.cil.oc:OpenComputers:MC1.7.10-1.7.2.1204:dev"
    compile "cofh:CoFHCore:1.7.10R3.0.4:dev"
    compile "cofh:CoFHLib:1.7.10R3.0.3:dev"
    compile "com.enderio.core:EnderCore:1.7.10-0.2.0.39_beta:dev"
    compile "com.enderio:EnderIO:1.7.10-2.3.0.430_beta:dev"
    compile "mantle:Mantle:1.7.10-0.3.2.jenkins187:deobf"
    compile "tconstruct:TConstruct:1.7.10-1.8.3.build927:deobf"
}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'thaumic.tinkerer.preloader.ThaumicTLoaderContainer'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

static def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}
